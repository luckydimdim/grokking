Sliding window

1. Given an array, find the average of all contiguous subarrays of size ‘K’ in it.
2. Given an array of positive numbers and a positive number ‘k’, find the maximum sum of any contiguous subarray of size ‘k’.
3. Given an array of positive numbers and a positive number ‘S’, find the length of the smallest contiguous subarray whose sum is greater than or equal to ‘S’. Return 0, if no such subarray exists.
4. Given a string, find the length of the longest substring in it with no more than K distinct characters.
5. Given an array of characters where each character represents a fruit tree, you are given two baskets and your goal is to put maximum number of fruits in each basket. The only restriction is that each basket can have only one type of fruit.
6. Given a string, find the length of the longest substring which has no repeating characters.
7. Given a string with lowercase letters only, if you are allowed to replace no more than ‘k’ letters with any letter, find the length of the longest substring having the same letters after replacement.
8. Given an array containing 0s and 1s, if you are allowed to replace no more than ‘k’ 0s with 1s, find the length of the longest contiguous subarray having all 1s.
9. Given a string and a pattern, find out if the string contains any permutation of the pattern.
10. Given a string and a pattern, find all anagrams of the pattern in the given string.
11. Given a string and a pattern, find the smallest substring in the given string which has all the characters of the given pattern.
12. Given a string and a list of words, find all the starting indices of substrings in the given string that are a concatenation of all the given words exactly once without any overlapping of words. It is given that all words are of the same length.

1. Substring or Subarray
2. Continuous
3. Properties of the window: anagrams, permutation, sum, average, min or max length, replacements
4. Methods:
    - Run end border each turn
    - Use a hash map when need to work with permutated strings or anagrams, uniques, replacements, etc
        - Prefill hash map with pattern and then reduce values until they are 0 use matched counter
        - Fill hash map inside the main loop: create element if not exists then always increment it
        - Decrement elements and then delete them if they equal to zero in a loop or on each turn and decrease matched counter
    - Move window start border each turn 1 time or jump to a position in the hash map
    - Calculate result on each term and save it to separate variable
5. Time complexity: usually O(N + M), Space complexity: O(N) or O(1) for predefined hash map
