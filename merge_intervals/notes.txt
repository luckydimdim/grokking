Merge Intervals

1. Given a list of intervals, merge all the overlapping intervals to produce a list that has only mutually exclusive intervals.

2. Given a list of non-overlapping intervals sorted by their start time, insert a given interval at the correct position and merge all necessary intervals to produce a list that has only mutually exclusive intervals.

3. Given two lists of intervals, find the intersection of these two lists. Each list consists of disjoint intervals sorted on their start time.

4. Given an array of intervals representing ‘N’ appointments, find out if a person can attend all the appointments.

5. Given a list of intervals representing the start and end time of ‘N’ meetings, find the minimum number of rooms required to hold all the meetings.

6. We are given a list of Jobs. Each job has a Start time, an End time, and a CPU load when it is running. Our goal is to find the maximum CPU load at any time if all the jobs are running on the same machine.

7. For ‘K’ employees, we are given a list of intervals representing the working hours of each employee. Our goal is to find out if there is a free interval that is common to all employees. You can assume that each list of employee working hours is sorted on the start time.

Technics:

if intervals[i][start] < intervals[i-1][end]:
  # please note the comparison above, it is "<" and not "<="
  # while merging we needed "<=" comparison, as we will be merging the two
  # intervals having condition "intervals[i][start] == intervals[i - 1][end]" but
  # such intervals don't represent conflicting appointments as one starts right
  # after the other

if len(intervals) < 2:
  return intervals

intervals.sort(key=lambda x: x.start)

intervals.sort(key=lambda x: x.start)

  start = intervals[0].start
  end = intervals[0].end
  for i in range(1, len(intervals)):
    interval = intervals[i]
    if interval.start <= end:  # overlapping intervals, adjust the 'end'
      end = max(interval.end, end)
    else:  # non-overlapping interval, add the previous internval and reset
      mergedIntervals.append(Interval(start, end))
      start = interval.start
      end = interval.end

  # add the last interval
  mergedIntervals.append(Interval(start, end))
  return mergedIntervals


from heapq import *

def __lt__(self, other):
  return self.end < other.end

for meeting in meetings:
  while len(min_heap) > 0 and meeting.start >= min_heap[0].end:
    heappop(min_heap)

  heappush(min_heap, meeting)